apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'signing'

android {

    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode libVersionCode.toInteger()
        versionName libVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events "passed", "skipped", "failed"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            afterSuite { desc, result ->
                def output = "${result.resultType} (" +
                        "${result.testCount} tests, " +
                        "${result.successfulTestCount} passed, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped)"
                def repeatLength = output.length()
                println('\n' + ('=' * repeatLength) + '\n' + desc.name + '\n' + output + '\n' + ('=' * repeatLength))
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation 'androidx.core:core-ktx:1.0.1'

    implementation 'androidx.annotation:annotation:1.0.2'

    testImplementation "junit:junit:$junitVersion"
}

dokka {
    moduleName = libDescription
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    includes = ['packages.md']
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task dokkaJar(type: Jar, dependsOn: project.dokka) {
    archiveClassifier.set('javadoc')
    from dokka
}

artifacts {
    archives sourcesJar
    archives dokkaJar
}

if (hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        pom.groupId = "$groupId"
        pom.artifactId = "$artifactId"
        pom.version = "$libVersion"

        pom.project {

            name libName
            packaging 'jar'
            description libDescription
            url libUrl

            scm {
                connection 'scm:git:https://github.com/sczerwinski/android-graphics-util.git'
                developerConnection 'scm:git:https://github.com/sczerwinski/android-graphics-util.git'
                url 'https://github.com/sczerwinski/android-graphics-util'
            }

            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://www.apache.org/licenses/LICENSE-2.0'
                }
            }

            developers {
                developer {
                    id 'sczerwinski'
                    name 'Slawomir Czerwinski'
                    email 'slawomir@czerwinski.it'
                }
            }
        }

        if (System.getenv('SONATYPE_USERNAME') != null) {

            println("Uploading to Sonatype")

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(
                        userName: System.getenv('SONATYPE_USERNAME'),
                        password: System.getenv('SONATYPE_PASSWORD')
                )
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(
                        userName: System.getenv('SONATYPE_USERNAME'),
                        password: System.getenv('SONATYPE_PASSWORD')
                )
            }

        } else if (project.hasProperty('ossrhUsername')) {

            println("Uploading to Sonatype")

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

        } else {

            println("Uploading to local repository")

            repository(url: "file://${buildDir}/release/$libVersion")

        }
    }
}
