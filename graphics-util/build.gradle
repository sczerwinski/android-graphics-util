apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {

    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode libVersionCode.toInteger()
        versionName libVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events "passed", "skipped", "failed"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            afterSuite { desc, result ->
                def output = "${result.resultType} (" +
                        "${result.testCount} tests, " +
                        "${result.successfulTestCount} passed, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped)"
                def repeatLength = output.length()
                logger.quiet('\n' + ('=' * repeatLength) + '\n' + desc.name + '\n' + output + '\n' + ('=' * repeatLength))
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.annotation:annotation:1.1.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testImplementation 'io.mockk:mockk:1.10.0'
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    configuration {
        moduleName = libDescription
        includes = ['packages.md']
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task dokkaJar(type: Jar, dependsOn: project.dokka) {
    archiveClassifier.set('javadoc')
    from dokka
}

artifacts {
    archives sourcesJar
    archives dokkaJar
}

def withSigning = hasProperty('signing.keyId')
def isSnapshot = libVersion.endsWith('SNAPSHOT')

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = "$libGroupId"
                artifactId = "$libArtifactId"
                version = "$libVersion"

                pom {
                    name = libName
                    description = libDescription
                    url = libUrl
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'sczerwinski'
                            name = 'Slawomir Czerwinski'
                            email = 'slawomir@czerwinski.it'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/sczerwinski/android-graphics-util.git'
                        developerConnection = 'scm:git:https://github.com/sczerwinski/android-graphics-util.git'
                        url = 'https://github.com/sczerwinski/android-graphics-util'
                    }
                }
            }
            debug(MavenPublication) {
                from components.debug

                groupId = "$libGroupId"
                artifactId = "$libArtifactId-debug"
                version = "$libVersion"

                pom {
                    name = libName
                    description = libDescription
                    url = libUrl
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'sczerwinski'
                            name = 'Slawomir Czerwinski'
                            email = 'slawomir@czerwinski.it'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/sczerwinski/android-graphics-util.git'
                        developerConnection = 'scm:git:https://github.com/sczerwinski/android-graphics-util.git'
                        url = 'https://github.com/sczerwinski/android-graphics-util'
                    }
                }
            }
        }
        repositories {
            maven {
                if (System.getenv('SONATYPE_USERNAME') != null) {
                    logger.quiet("Publishing to Sonatype")
                    url = isSnapshot ? ossrhSnapshotRepo : ossrhRepo
                    credentials {
                        username = System.getenv('SONATYPE_USERNAME')
                        password = System.getenv('SONATYPE_PASSWORD')
                    }
                } else if (project.hasProperty('ossrhUsername')) {
                    logger.quiet("Publishing to Sonatype")
                    url = isSnapshot ? ossrhSnapshotRepo : ossrhRepo
                    credentials {
                        username = ossrhUsername
                        password = ossrhPassword
                    }
                } else {
                    logger.quiet("Publishing to local repository")
                    url = "${buildDir}/repos"
                }
            }
        }
    }

    if (withSigning) {
        signing {
            sign publishing.publications.release
            sign publishing.publications.debug
        }
    }
}
